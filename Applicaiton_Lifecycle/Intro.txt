
|||||||||||||||||||||||||||||||
---- APPLICATION LIFE CYCLE ---
|||||||||||||||||||||||||||||||


* The application life cycle constitutes of the sequence of events that occurs between the launch and termination of the application.



--- Steps involved from device reboot to app launch ---
-------------------------------------------------------

When user turn on the phone no apps are running except app which belong to the OS. When user tap on your app in icon, Spring Board launches your app.

* SpringBoard is the standard application that manages the iPhone's home screen. Other tasks include starting WindowServer, launching and bootstrapping applications and setting some of the device's setting on startup.

* When springboard animates and loads an app's launch screen, our app and necessary shared libraries will be loaded into the memory. Eventually our app begins execution and applicaiton delegate receives the notifications.


||| App Delegate ||| 
AppDelegate is the application delegate object. It inherits the UIResponder class and implements the UIApplicationDelegate delegate protocol.

||| UIApplicationDelegate |||
Main entry into an iOS app is UIApplicationDelegate. It is a protocol and you need to impliment that into your app to get notified about user events such as app launch, app goes into background or foreground, app is terminated, a push notification was opened etc.

||| UI Responder ||| 
UIResponder class makes AppDelegate have the ability to repond to user events and UIApplicationDelegate enables the AppDelegate to be an application delegate object to manage and respond to the life cycle of the application.

Execution States for an App :

  * Not running state : The app has not been launched or terminated by the system.
  * Inactive State : The app is entering the foreground state but not receiving events.
  * Active state : The app enters the foreground state and can process event.
  * Background state : In this state, if there is any executable code, it will execute and if there is no executable code or the execution is complete, the application will suspend immidiately.
  * Suspended state : The app is in the background(in memory) but is not executing code and if system does not have enough memeory, it will terminate the app.


NOT RUNNING STATE         |          FOREGROUND STATE          |          BACKGROUND             |    SUSPENDED STATE 

                                     1. Inactive state              
                                     2. Active state


Flow of app life cycle from launch to suspended states :-

  1. User taps on app icon
            |
  2. Main() & UIApplicationMain() & Load main UI File
            |
  3. First initialization & Restore UI state     --------------------      willFinishLaunchingWithOptions and runs Various methods
            |
  4. Final initialization                        --------------------      didFinishLaunchingWithOptions
            |
  5. Active app(running)                         --------------------      applicationDidBecomeActive
            |
      | Event Loop |                             --------------------      Handle event
            |
      Switch to different app
(Moving our app from foreground to background)
            |
Deactivate the app(Foreground)                   --------------------      applicationWillResignActive
            |
      Enter Background                           --------------------      applicationDidEnterBackground
            |

       Allowed to run?
          |      |
         No      Yes
          |      |
          |     Monitor event                    --------------------      Handle Event
          |      |   Sleeps when not handling events
          |      |  
     App sleeps(suspended state)                -----------     applicationWillTerminate
                 |
      --------------------------
      |                         |
Switch to this app      Terminate app(memory pressure) 


||||||||||||||||||||||||||
--- The Main Run loop ---
||||||||||||||||||||||||||

 * An app's main run loop processes all user-related events
 * App delegate sets up the main run loop at launch time and uses it to process events and handle updates to view-based interfaces.
 * Main run loop executes on the app's main thread
 * Main thread is serial thread and this ensures that user-related events are processed serially in the order in which they were received.



----- INTERVIEW QUESTIONS ON APP LIFE CYCLE -----


Q. How does a background iOS app gets resumed in foreground?

Ans. When user launches an app that is currently in background, the system moves app to the inactive state and tehn to the active state.


        App in Background State               Appdelegate/ Function executes in code
                    |
        App relaunched(inactive)       <--->  applicationWillEnterForeground
                    |
        App enter foreground(active)   <--->  applicationDidBecomeActive


Q. What are the steps involved when app enter to foreground after device rebooted?

Ans. When user launches an app for the first time or after device reboot or after system terminates the app, the system moves app to the active state.

        User taps app icon/app launched first time          Appdelegate/ Function executes in code
                             |
                   First initialization           <---->     willFinishLaunchingWithOptions
                             |
                   Final initialization           <---->     didFinishLaunchingWithOptions
                             |
                App enter foreground(active)      <---->     applicationDidBecomeActive


Q. What are the steps involved when app moves from foreground to background?

Ans.  
             Click on Home button when app in foreground          Appdelegate/ Function executes in code
                                 |
                         Deactivate the app               <--->    applicationWillResignActive
                                 |
                         App enter Background             <--->    applicationDidEnterBackground


Q. How can you opt out background execution?

Ans. 
              * You can explicitly opt out background execution by adding UIApplicationExitsOnSuspend key to application's Info.plist file and setting its value to 'YES'.
              * When you opt out background state, app life cycles will be between the not running, inactive, and active states and never enters the background or suspended states.


Q. Which is the app state when device is rebooted?

Ans.  Not running state.


Q. When app is running but not receiving event. In which state app is in?

Ans. Inactive state.


Q. How does an iOS app respond to interrupts like SMS, Incoming call, Calendar, etc?

Ans. Application moves to the inactive state temporarily and it remains in this state until the user decides whether to accept or ignore the interruption. 

     * If the user ignores the interruption, the application is reactivated.
     * If the user accepts the interruption, the application moves into the suspended state.

     App in foreground
            |
    Incoming call or sms or calendar notification         <--->    applicationWillResignActive
            |
        Ignore?       <----->   applicationDidBecomeActive
            |
    App enters background     <----->    applicationDidEnterBackground


Q. What are the uses of background state?

Ans.   * It gives opportunity to save any application data that will help user to relaunch the app where they left.
       * App release any resources that don't need.

Q. How can you add additional background execution time for your app?

Ans.   * App can stay in background for few seconds and you can execute any code within that time.
       * You can call beginBackgroundTask(expirationHandler handler: (() -> Void)? = nil) method which requests addtional background execution time for your app.
       * To extend the execution time of an app extension, use the performExpiringActivity(withReason:using:) method.


Q. How can you check maximum amount of time available for app in background?

Ans. backgroundTimeRemaining helps to get maximum amount of time remaining for the app to run in the background. 

The value is valid only after the app enters teh background and has started at least one task using beginBackgroundTask(expirationHandler:) in the foreground.


Q. How can you debug your background task?

Ans. beginBackgroundTask(withName:expirationHandler:) for debugging background task.


|||||||||||||||||||
--- REFERENCES ---
|||||||||||||||||||

https://manasaprema04.medium.com/application-life-cycle-in-ios-f7365d8c1636

