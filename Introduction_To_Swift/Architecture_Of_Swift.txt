|||||||||||||||||||||
ARCHITECTURE OF SWIFT 
---------------------

print("Hello, World!")  // The print() function outputs "Hello, World!" in the console/terminal.

Note : The angular brackets '>' in the following examples of this chapter are used to denote a line in a terminal, they are not a part of swift code.

How to write code?
1. A complete swift command is a statement. 
2. Write one statemet in one line
    Example - > print("Hello")  //  First line
              > print("World!)  //  Second line
3. If we combine more than one statement in a line, then we have to put a semicolon(;) between the 2 satements.
    Example - print("Hello, World!"); print("Hello, World")
4. Putting a semicolon(;)  at the end of each statement is not necessary.

||||||||||||||||
--- COMMENTS ---
||||||||||||||||

1. Anything, written after //, or between /* */ is a comment, i.e the rest of the code is not effected by a comment. Programmers usually use comments to elaborate their code or to take notes.
  Example -  > print("Hello, World!) // This is a single line comment.
             > /*
             >  This is a multi-line comment
             > */


How to write code? Continued.

5. A single statement can be broken into multiple lines in order to prevent them from becoming long lines. This is for the purpose of neat and clean code.
  Example - 
            > // Complete statement in one line
            > for i in range{ print(i) } 
            >
            > // For loop statement in multiple lines
            > for i in range {
            >     print(i)
            > }

6. In most coding languages, curly braces are used as delimiters .i.e used for seperation. It is conventional to give a line break after curly braces and, put an indentation (spaces or tabs) for code clarity.
  Example - 
            > for i in range { // line breaks here
            > ---- print("Hello")  // Here, (----) before print() function represents indentation
            > }

7. XCode will automatically impose these conventions but a Swift code doesn't care about line breaks and indentations. For Swift the following code is also acceptable :
            > for i in range{ print(i) }



|||||||||||||||||||
--- COMPILATION ---
|||||||||||||||||||

Swift is a compiled language. 

Code text file is firstly passed through a compiler, and then converted into a low-level language(0s and 1s) that the computer can understand.
A code must build before its actually run. The compiler checks for errors in the code and if it encounters any, an error prompt is thrown to fix it before running the code.



||||||||||||||||||||||||
--- Objects in Swift ---
||||||||||||||||||||||||

In Swift everything is an object. An object is a basic entity/data field that actually exits in the memory. It is based on a blueprint/template that has 
attributes and behaviours(variables and functions) defined as a class.

   > // Blueprint
   > class Car{
   >     var speed = 120
   >     func start(){
   >         print("Vroooom!")
   >     }
   > }    
   > // Object
   > var ferrari = Car()
   

For example, an object is a data field that has properties and behaviours. We can access the properties of an object by using dot-notation.
Example - 
        > Car.speed    // Accessing properties
        > Car.start()  // Calling behaviours

Characteristics of an object 
----------------------------

1. Identity: Every object must have a different identity from the other, known as the objectâ€™s name. No two object must have the same name. An identity is basically an objects address in the memory.
2. State: If there are some properties of a class, that is designed to be derived in an object, it must have some values to get initiated (usually done with the help of constructors).
3. Behaviour: Now since the object have a name and some properties, it must have some purpose as well. So these purposes are defined with help of functions (processes) and are known as behaviours.


*** Let's start by stipulating that an object is something that we can send messages to. A message is roughly speaking an instruction. 

Example -  We can give instructions to a car for starting the engine, moving forward, appllying breaks, etc. Here, car acts as an object.

*** The idea of everything being an object is a way of suggesting that even "primitive" linguistic entities can be sent messages. 

Example - 
            1 is nothing just a digit and no more. It's surprising to find that 1             can be followed by a dot and a message in Swift.

          > let d = 1.description

Another example - 
          > let sum = 1 + 2;
        The above line of code is nothing but a trickery. It just says that 1 is an object and, + is a message, but a message of special type(operator syntax).

*** ---- In Swift, every noun is an object and every verb is a message. ---- ***

To test whether everything in swift is an object, we can try to modify it. An object type can be extended in Swift, meaning that we can define our own messages on that type. 
We can change the number type as follows: 

    > extension Int {
    >    func sayHello() {
    >        print("Hello, I'm \(self)")
    >     }
    > }
    >
    > 1.sayHello() // Outputs : "Hello, I'm 1"

In Swift, then, 1 is an object. In some languages, such as Objective-C it clearly is not; it is a "primitive" or scalar built-in data type. In Swift there are no scalar types(primitive); everything is ultimately object types.






